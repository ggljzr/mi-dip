taky pak mozna pri prihlasovani do aplikace pouzit https://en.wikipedia.org/wiki/Digest_access_authentication, ale imho by pres https mel basic auth stacit (zeptat se cejky? viz https://alfresco.fit.cvut.cz/share/proxy/alfresco/api/node/content/workspace/SpacesStore/e1b81080-35e9-4bac-ad67-749e242af633)

neco vo sifrovani na mqtt:
https://www.hivemq.com/blog/mqtt-security-fundamentals-tls-ssl
https://www.hivemq.com/blog/mqtt-security-fundamentals-payload-encryption
teoreticky ta payload encryption by nemela bejt nutna,
staci jen to sifrovani v tsl -- ten broker nedovoli pripojeni klientu co neznaj heslo
https://medium.com/@waxpraxis/setting-up-mosquitto-1-4-with-tls-84b4caa3ecd8 -- tls sifrovani se self signed certifikatem
https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.iotsdk.v0.9.0%2Fiot_sdk_user_guides_mosquitto.html
taky viz citace v praci

podivat se jak je to RTC na rpi
https://www.adafruit.com/product/3386
https://learn.adafruit.com/adding-a-real-time-clock-to-raspberry-pi/overview

jak spoustet flask s apache:
http://flask.pocoo.org/docs/0.12/deploying/mod_wsgi/ --basic navod
https://stackoverflow.com/questions/19344252/how-to-install-configure-mod-wsgi-for-py3 -- python3
https://stackoverflow.com/questions/36493678/how-do-i-set-up-the-wsgi-file-and-apache-configuration-to-deploy-on-a-large-fla --dalsi info (musi se nastavit secret_key pro sessions v tim .wsgi)
https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-16-04 --self signed cert

neco vo autentizaci pres https:
https://zapier.com/engineering/apikey-oauth-jwt/
otazka: hashovat ulozeny api klice v nadrazenym systemu?

u ty autentizace by to nahravani klicu krome ty seriovy linky slo udelat treba tak, ze v tim webovym rozhrani by sel (na omezenou dobu) zapnout nakej registracni mod, kterej by povoloval nakej specialni request, kterej by vygeneroval novej klic pro zarizeni, poslal mu ho a ulozil ho do databaze. Tj uzivatel by zapnul tenhle mod, na podrizenym systemu zmack naky special tlacitko, tim by poslal tenhle request, a nadrazenej system by tomu podrizenymu poslal zpatky klic a do databaze si ulozil ze ma novy zarizeni. Po tyhle registraci by uzivatel ten reg. mod zase vypnul. <-- nevim jestli tohle popsat v analyze, nebo az pak treba v navrhu

nejak formalne sepsat pozadavky na ten system (provoz v mistni siti atd...)? mozna na zacatek ty analyzi uplne

implementace: podivat se na to RTC, mozna nefunguje ta synchronizace systemovejch hodin -> cas ulozenej na rtc (prectenej pomoci hwclock) je spravne, ale kdyz se to vypne a zapne tak je systemovej cas spatne (jinej nez v hwclock), a sesynchronizuje se az kdyz se to pripoji k internetu. Moznej workaround -> zavolat hwclock -s (nastaveni systemovyho casu z hwclock) pri bootu (also basic info: https://learn.adafruit.com/adding-a-real-time-clock-to-raspberry-pi?view=all#set-rtc-time, vo tim hwclock -s syncu https://raspberrypi.stackexchange.com/questions/28583/hwclock-s-in-rc-local-wont-work)

mozna este vic srovnat ty frameworky django a flask, nebo se aspon podivat jestli by to django nebylo lepsi. kdyby z toho vyslo naky detailnejsi srovnani, tak asi rozdelit tu sekci programovaci jazyk na dve, s tim ze v ty druhy bude popis vyberu frameworku

vo mvc ve flasku viz https://www.digitalocean.com/community/tutorials/how-to-structure-large-flask-applications#working-with-modules-and-blueprints-(components)